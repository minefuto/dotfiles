"vim-plug{{{
try
  call plug#begin('~/.vim/plugged')
  Plug 'arcticicestudio/nord-vim'
  Plug 'cohama/lexima.vim'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'google/vim-searchindex'
  Plug 'itchyny/lightline.vim'
  Plug 'machakann/vim-sandwich'
  Plug 'mattn/ctrlp-matchfuzzy'
  Plug 'mattn/vim-lsp-settings'
  Plug 'mattn/vim-goimports'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'
  Plug 'simeji/winresizer'
  Plug 'tpope/vim-fugitive'
  Plug 'zah/nim.vim'
  call plug#end()
catch
endtry
"}}}
"general{{{
syntax on
filetype plugin indent on
let g:mapleader = "\<Space>"
set number
set shortmess+=c
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,cp932,euc-jp,sjis
set fileformat=unix
set belloff=all
set ambiwidth=double
set completeopt=menuone,preview
set splitright
set splitbelow
set autoread
set wrap
set display=lastline
set wildmenu
set hidden
set noswapfile
set nobackup
set noundofile
set incsearch
set ignorecase
set smartcase
set hlsearch
set wrapscan
set write
set modifiable
set backspace=indent,eol,start
set expandtab
set tabstop=2
set shiftwidth=2
set clipboard+=unnamed,unnamedplus
set laststatus=2
set colorcolumn=80
set undofile
if !isdirectory(expand("$HOME/.vimundodir"))
  call mkdir(expand("$HOME/.vimundodir"), "p")
endif
set undodir=$HOME/.vimundodir
"}}}
"keymap{{{
noremap j gj
noremap gj j
noremap k gk
noremap gk k
nnoremap <silent> <F1> :<C-u>set relativenumber!<CR>
nnoremap <silent> <esc><esc> :<C-u>nohlsearch<CR>
nnoremap x "_x
nnoremap Q q
nnoremap <C-q> <Nop>
nnoremap M m
vnoremap * "zy:let @/ = @z<CR>n
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
"}}}
"language{{{
augroup fileset
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType go setlocal sw=4 ts=4 sts=4 noexpandtab
augroup END
"}}}
"nord-vim{{{
if empty(globpath(&rtp, 'colors/nord.vim')) == 0
  colorscheme nord
endif
"}}}
"vim-lsp{{{
if empty(globpath(&rtp, 'autoload/lsp.vim')) == 0
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_signs_enabled = 1
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_diagnostics_float_delay = 200
  let g:lsp_preview_max_height = 10
  let g:asyncomplete_auto_popup = 0
  let g:asyncomplete_auto_completeopt = 1

  function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  inoremap <silent><expr> <C-n>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<C-n>" :
    \ asyncomplete#force_refresh()

  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    inoremap <expr> <CR> pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
    inoremap <expr> <C-y> pumvisible() ? asyncomplete#close_popup() : "\<C-y>"
  endfunction

  augroup lsp_install
    autocmd!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

endif
"}}}
"vim-fugitive{{{
if empty(globpath(&rtp, 'autoload/fugitive.vim')) == 0
  nnoremap <leader>gb :<C-u>Gblame<CR>
  nnoremap <leader>gc :<C-u>Gcommit<CR>
  nnoremap <leader>gd :<C-u>Gdiff<CR>
  nnoremap <leader>gm :<C-u>Gmerge<CR>
  nnoremap <leader>gp :<C-u>Gpull<CR>
  nnoremap <leader>gs :<C-u>Gstatus<CR>
endif
"}}}
"winresizer{{{
if empty(globpath(&rtp, 'autoload/winresizer.vim')) == 0
  let g:winresizer_enable = 1
  let g:winresizer_start_key = '<leader>w'
endif
"}}}
"neosnippet{{{
if empty(globpath(&rtp, 'autoload/neosnippet.vim')) == 0
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
endif
"}}}
"vim-tmux-nagigater{{{
"let g:tmux_navigator_no_mappings = 1
"nnoremap <silent> <C-q>h :<C-u>TmuxNavigateLeft<CR>
"nnoremap <silent> <C-q>j :<C-u>TmuxNavigateDown<CR>
"nnoremap <silent> <C-q>k :<C-u>TmuxNavigateUp<CR>
"nnoremap <silent> <C-q>l :<C-u>TmuxNavigateRight<CR>
"}}}
"ctrlp{{{
if empty(globpath(&rtp, 'autoload/ctrlp.vim')) == 0
  let g:ctrlp_map = '<Nop>'
  nnoremap <silent> <leader>f :<C-u>CtrlP<CR>
  nnoremap <silent> <leader>b :<C-u>CtrlPBuffer<CR>
  nnoremap <silent> <leader>l :<C-u>CtrlPLine<CR>
endif
"}}}
"ctrlp-matchfuzzy{{{
if empty(globpath(&rtp, 'autoload/ctrlp_matchfuzzy.vim')) == 0
  let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
endif
"}}}
"lightline{{{
if empty(globpath(&rtp, 'autoload/lightline.vim')) == 0
  let g:lightline = {
      \ 'colorscheme': 'nord',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ 'mode_map': {
        \ 'n' : 'N',
        \ 'i' : 'I',
        \ 'R' : 'R',
        \ 'v' : 'V',
        \ 'V' : 'VL',
        \ "\<C-v>": 'VB',
        \ 'c' : 'C',
        \ 's' : 'S',
        \ 'S' : 'SL',
        \ "\<C-s>": 'SB',
        \ 't': 'T',
        \ },
      \ }
endif
"}}}
"vim-goimports setting{{{
if empty(globpath(&rtp, 'autoload/goimports.vim')) == 0
  let g:goimports_simplify = 1
endif
"}}}
